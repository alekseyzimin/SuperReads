/** @file error_correct_reads_cmdline.hpp
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef ERROR_CORRECT_READS_CMDLINE_H
#define ERROR_CORRECT_READS_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "error_correct_reads"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "error_correct_reads"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char ** db_arg;	/**< @brief Jellyfish database.  */
  char ** db_orig;	/**< @brief Jellyfish database original value given at command line.  */
  unsigned int db_min; /**< @brief Jellyfish database's minimum occurreces */
  unsigned int db_max; /**< @brief Jellyfish database's maximum occurreces */
  const char *db_help; /**< @brief Jellyfish database help description.  */
  int thread_arg;	/**< @brief Number of threads (default='1').  */
  char * thread_orig;	/**< @brief Number of threads original value given at command line.  */
  const char *thread_help; /**< @brief Number of threads help description.  */
  int both_strands_flag;	/**< @brief Canonical k-mers in database (default=on).  */
  const char *both_strands_help; /**< @brief Canonical k-mers in database help description.  */
  int min_count_arg;	/**< @brief Minimum count for a k-mer to be considered \"good\" (default='2').  */
  char * min_count_orig;	/**< @brief Minimum count for a k-mer to be considered \"good\" original value given at command line.  */
  const char *min_count_help; /**< @brief Minimum count for a k-mer to be considered \"good\" help description.  */
  int skip_arg;	/**< @brief Number of bases to skip for start k-mer (default='2').  */
  char * skip_orig;	/**< @brief Number of bases to skip for start k-mer original value given at command line.  */
  const char *skip_help; /**< @brief Number of bases to skip for start k-mer help description.  */
  int good_arg;	/**< @brief Number of good k-mer in a row for anchor (default='2').  */
  char * good_orig;	/**< @brief Number of good k-mer in a row for anchor original value given at command line.  */
  const char *good_help; /**< @brief Number of good k-mer in a row for anchor help description.  */
  int anchor_count_arg;	/**< @brief Minimum count for an anchor k-mer (default=min-count).  */
  char * anchor_count_orig;	/**< @brief Minimum count for an anchor k-mer (default=min-count) original value given at command line.  */
  const char *anchor_count_help; /**< @brief Minimum count for an anchor k-mer (default=min-count) help description.  */
  int window_arg;	/**< @brief Size of window (default=mer length).  */
  char * window_orig;	/**< @brief Size of window (default=mer length) original value given at command line.  */
  const char *window_help; /**< @brief Size of window (default=mer length) help description.  */
  int error_arg;	/**< @brief Maximum number of error in a window (default='5').  */
  char * error_orig;	/**< @brief Maximum number of error in a window original value given at command line.  */
  const char *error_help; /**< @brief Maximum number of error in a window help description.  */
  char * output_arg;	/**< @brief Output file prefix (default='error_corrected').  */
  char * output_orig;	/**< @brief Output file prefix original value given at command line.  */
  const char *output_help; /**< @brief Output file prefix help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int db_given ;	/**< @brief Whether db was given.  */
  unsigned int thread_given ;	/**< @brief Whether thread was given.  */
  unsigned int both_strands_given ;	/**< @brief Whether both-strands was given.  */
  unsigned int min_count_given ;	/**< @brief Whether min-count was given.  */
  unsigned int skip_given ;	/**< @brief Whether skip was given.  */
  unsigned int good_given ;	/**< @brief Whether good was given.  */
  unsigned int anchor_count_given ;	/**< @brief Whether anchor-count was given.  */
  unsigned int window_given ;	/**< @brief Whether window was given.  */
  unsigned int error_given ;	/**< @brief Whether error was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* ERROR_CORRECT_READS_CMDLINE_H */
