/* SuperRead pipeline
 * Copyright (C) 2012  Genome group at University of Maryland.
 * 
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/***** This code was generated by Yaggo. Do not edit ******/

#ifndef __COMBINE_JF_DBS_HPP__
#define __COMBINE_JF_DBS_HPP__

#include <yaggo.hpp>

class combine_jf_dbs {
public:
  uint32_t                       min_count_arg;
  bool                           min_count_given;
  const char *                   output_arg;
  bool                           output_given;
  bool                           verbose_flag;
  std::vector<const char *>      db_jf_arg;
  typedef std::vector<const char *>::iterator db_jf_arg_it;
  typedef std::vector<const char *>::const_iterator db_jf_arg_const_it;

  enum {
    USAGE_OPT = 1000
  };

  combine_jf_dbs() : 
    min_count_arg(2), min_count_given(false),
    output_arg("combined.jf"), output_given(false),
    verbose_flag(false)
  { }

  combine_jf_dbs(int argc, char* argv[]) :
    min_count_arg(2), min_count_given(false),
    output_arg("combined.jf"), output_given(false),
    verbose_flag(false)
  { parse(argc, argv); }

  void parse(int argc, char* argv[]) {
    static struct option long_options[] = {
      {"min-count", 1, 0, 'm'},
      {"output", 1, 0, 'o'},
      {"verbose", 0, 0, 'v'},
      {"help", 0, 0, 'h'},
      {"usage", 0, 0, USAGE_OPT},
      {"version", 0, 0, 'V'},
      {0, 0, 0, 0}
    };
    static const char *short_options = "hVm:o:v";

    std::string err;
#define CHECK_ERR(type,val,which) if(!err.empty()) { std::cerr << "Invalid " #type " '" << val << "' for [" which "]: " << err << "\n"; exit(1); }
    while(true) { 
      int index = -1;
      int c = getopt_long(argc, argv, short_options, long_options, &index);
      if(c == -1) break;
      switch(c) {
      case ':': 
        std::cerr << "Missing required argument for "
                  << (index == -1 ? std::string(1, (char)optopt) : std::string(long_options[index].name))
                  << std::endl;
        exit(1);
      case 'h':
        std::cout << usage() << "\n\n" << help() << std::endl;
        exit(0);
      case USAGE_OPT:
        std::cout << usage() << "\nUse --help for more information." << std::endl;
        exit(0);
      case 'V':
        print_version();
        exit(0);
      case '?':
        std::cerr << "Use --usage or --help for some help\n";
        exit(1);
      case 'm':
        min_count_given = true;
        min_count_arg = yaggo::conv_uint<uint32_t>((const char *)optarg, err, false);
        CHECK_ERR(uint32_t, optarg, "-m, --min-count=uint32")
        break;
      case 'o':
        output_given = true;
        output_arg = optarg;
        break;
      case 'v':
        verbose_flag = true;
        break;
      }
    }
    if(argc - optind < 2)
      error("Requires at least 2 arguments.");
    for( ; optind < argc; ++optind) {
      db_jf_arg.push_back(argv[optind]);
    }
  }
#define combine_jf_dbs_USAGE "Usage: combine_jf_dbs [options] db.jf:path+"
  const char * usage() const { return combine_jf_dbs_USAGE; }
  void error(const char *msg) { 
    std::cerr << "Error: " << msg << "\n" << usage()
              << "\nUse --help for more information"
              << std::endl;
    exit(1);
  }
#define combine_jf_dbs_HELP "Combine Jellyfish databases for use with error correcter\n\nN databases are merged. The highest quality k-mers are in the first database\n" \
  "and the lowest quality k-mers are in the last.\n" \
  "\n" \
  "The output database contains for every k-mer the number of the highest\n" \
  "quality database (N-1 for the best quality and 0 for the worst\n" \
  "quality) containing this k-mer and its count in this database.\n" \
  "\n" \
  "All the databases must use the same k-mer size.\n\n" \
  "Options (default value in (), *required):\n" \
  " -m, --min-count=uint32                   Minimum count for a k-mer to be considered \"good\" (2)\n" \
  " -o, --output=prefix                      Output file (combined.jf)\n" \
  " -v, --verbose                            Be verbose (false)\n" \
  "     --usage                              Usage\n" \
  " -h, --help                               This message\n" \
  " -V, --version                            Version"

  const char * help() const { return combine_jf_dbs_HELP; }
#define combine_jf_dbs_HIDDEN "Hidden options:"

  const char * hidden() const { return combine_jf_dbs_HIDDEN; }
  void print_version(std::ostream &os = std::cout) const {
#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "0.0.0"
#endif
    os << PACKAGE_VERSION << "\n";
  }
  void dump(std::ostream &os = std::cout) {
    os << "min_count_given:" << min_count_given << " min_count_arg:" << min_count_arg << "\n";
    os << "output_given:" << output_given << " output_arg:" << output_arg << "\n";
    os << "verbose_flag:" << verbose_flag << "\n";
    os << "db_jf_arg:" << yaggo::vec_str(db_jf_arg) << "\n";
  }
private:
};

#endif // __COMBINE_JF_DBS_HPP__"
