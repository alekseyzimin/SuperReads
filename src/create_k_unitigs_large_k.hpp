/***** This code was generated by Yaggo. Do not edit ******/

#ifndef __CREATE_K_UNITIGS_LARGE_K_HPP__
#define __CREATE_K_UNITIGS_LARGE_K_HPP__

#include <yaggo.hpp>

class create_k_unitigs_large_k {
public:
  int                            mer_arg;
  bool                           mer_given;
  uint64_t                       nb_mers_arg;
  bool                           nb_mers_given;
  int                            threads_arg;
  bool                           threads_given;
  const char *                   output_arg;
  bool                           output_given;
  double                         false_positive_arg;
  bool                           false_positive_given;
  const char *                   input_arg;

  enum {
    USAGE_OPT = 1000
  };

  create_k_unitigs_large_k(int argc, char *argv[]) :
    mer_arg(), mer_given(false),
    nb_mers_arg(), nb_mers_given(false),
    threads_arg(1), threads_given(false),
    output_arg(""), output_given(false),
    false_positive_arg(0.01), false_positive_given(false)
  {
    static struct option long_options[] = {
      {"mer", 1, 0, 'm'},
      {"nb-mers", 1, 0, 'n'},
      {"threads", 1, 0, 't'},
      {"output", 1, 0, 'o'},
      {"false-positive", 1, 0, 'f'},
      {"help", 0, 0, 'h'},
      {"usage", 0, 0, USAGE_OPT},
      {"version", 0, 0, 'V'},
      {0, 0, 0, 0}
    };
    static const char *short_options = "hVm:n:t:o:f:";

    std::string err;
#define CHECK_ERR(type,val,which) if(!err.empty()) { std::cerr << "Invalid " #type " '" << val << "' for [" which "]: " << err << "\n"; exit(1); }
    while(true) { 
      int index = -1;
      int c = getopt_long(argc, argv, short_options, long_options, &index);
      if(c == -1) break;
      switch(c) {
      case ':': 
        std::cerr << "Missing required argument for "
                  << (index == -1 ? std::string(1, (char)optopt) : std::string(long_options[index].name))
                  << std::endl;
        exit(1);
      case 'h':
        std::cout << usage() << "\n\n" << help() << std::endl;
        exit(0);
      case USAGE_OPT:
        std::cout << usage() << "\nUse --help for more information." << std::endl;
        exit(0);
      case 'V':
        print_version();
        exit(0);
      case '?':
        std::cerr << "Use --usage or --help for some help\n";
        exit(1);
      case 'm':
        mer_given = true;
        mer_arg = yaggo::conv_int<int>((const char *)optarg, err, false);
        CHECK_ERR(int_t, optarg, "-m, --mer=int")
        break;
      case 'n':
        nb_mers_given = true;
        nb_mers_arg = yaggo::conv_uint<uint64_t>((const char *)optarg, err, false);
        CHECK_ERR(uint64_t, optarg, "-n, --nb-mers=uint64")
        break;
      case 't':
        threads_given = true;
        threads_arg = yaggo::conv_int<int>((const char *)optarg, err, false);
        CHECK_ERR(int_t, optarg, "-t, --threads=int")
        break;
      case 'o':
        output_given = true;
        output_arg = optarg;
        break;
      case 'f':
        false_positive_given = true;
        false_positive_arg = yaggo::conv_double((const char *)optarg, err, false);
        CHECK_ERR(double_t, optarg, "-f, --false-positive=double")
        break;
      }
    }
    if(!mer_given)
      error("[-m, --mer=int] required switch");
    if(!nb_mers_given)
      error("[-n, --nb-mers=uint64] required switch");
    if(argc - optind != 1)
      error("Requires exactly 1 argument.");
    input_arg = argv[optind];
    ++optind;
  }
#define create_k_unitigs_large_k_USAGE "Usage: create_k_unitigs_large_k [options] input:path"
  const char * usage() const { return create_k_unitigs_large_k_USAGE; }
  void error(const char *msg) { 
    std::cerr << "Error: " << msg << "\n" << usage()
              << "\nUse --help for more information"
              << std::endl;
    exit(1);
  }
#define create_k_unitigs_large_k_HELP "Create k-unitigs with support for large k (k>31).\n\n\n\n" \
  "Options (default value in (), *required):\n" \
  " -m, --mer=int                           *k-mer size\n" \
  " -n, --nb-mers=uint64                    *Estimated number of distinct k-mers\n" \
  " -t, --threads=int                        Number of threads (1)\n" \
  " -o, --output=path                        Ouput file (stdout)\n" \
  " -f, --false-positive=double              False positive rate in bloom filter (0.01)\n" \
  "     --usage                              Usage\n" \
  " -h, --help                               This message\n" \
  " -V, --version                            Version"

  const char * help() const { return create_k_unitigs_large_k_HELP; }
#define create_k_unitigs_large_k_HIDDEN "Hidden options:"

  const char * hidden() const { return create_k_unitigs_large_k_HIDDEN; }
  void print_version(std::ostream &os = std::cout) const {
#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "0.0.0"
#endif
    os << PACKAGE_VERSION << "\n";
  }
  void dump(std::ostream &os = std::cout) {
    os << "mer_given:" << mer_given << " mer_arg:" << mer_arg << "\n";
    os << "nb_mers_given:" << nb_mers_given << " nb_mers_arg:" << nb_mers_arg << "\n";
    os << "threads_given:" << threads_given << " threads_arg:" << threads_arg << "\n";
    os << "output_given:" << output_given << " output_arg:" << output_arg << "\n";
    os << "false_positive_given:" << false_positive_given << " false_positive_arg:" << false_positive_arg << "\n";
    os << "input_arg:" << input_arg << "\n";
  }
private:
};

#endif // __CREATE_K_UNITIGS_LARGE_K_HPP__"
