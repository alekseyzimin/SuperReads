/* SuperRead pipeline
 * Copyright (C) 2012  Genome group at University of Maryland.
 * 
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/***** This code was generated by Yaggo. Do not edit ******/

#ifndef __REDUCE_SR_HPP__
#define __REDUCE_SR_HPP__

#include <yaggo.hpp>

class reduce_sr {
public:
  int                            maximum_search_depth_arg;
  bool                           maximum_search_depth_given;
  const char *                   output_arg;
  bool                           output_given;
  uint64_t                       largestkunitig_arg;
  const char *                   kunitigLengthsFile_arg;
  int                            kmerlen_arg;
  const char *                   SuperReads_sizes_arg;

  enum {
    USAGE_OPT = 1000
  };

  reduce_sr() : 
    maximum_search_depth_arg(100), maximum_search_depth_given(false),
    output_arg("reduce.tmp"), output_given(false)
  { }

  reduce_sr(int argc, char* argv[]) :
    maximum_search_depth_arg(100), maximum_search_depth_given(false),
    output_arg("reduce.tmp"), output_given(false)
  { parse(argc, argv); }

  void parse(int argc, char* argv[]) {
    static struct option long_options[] = {
      {"maximum-search-depth", 1, 0, 'd'},
      {"output", 1, 0, 'o'},
      {"help", 0, 0, 'h'},
      {"usage", 0, 0, USAGE_OPT},
      {"version", 0, 0, 'V'},
      {0, 0, 0, 0}
    };
    static const char *short_options = "hVd:o:";

    std::string err;
#define CHECK_ERR(type,val,which) if(!err.empty()) { std::cerr << "Invalid " #type " '" << val << "' for [" which "]: " << err << "\n"; exit(1); }
    while(true) { 
      int index = -1;
      int c = getopt_long(argc, argv, short_options, long_options, &index);
      if(c == -1) break;
      switch(c) {
      case ':': 
        std::cerr << "Missing required argument for "
                  << (index == -1 ? std::string(1, (char)optopt) : std::string(long_options[index].name))
                  << std::endl;
        exit(1);
      case 'h':
        std::cout << usage() << "\n\n" << help() << std::endl;
        exit(0);
      case USAGE_OPT:
        std::cout << usage() << "\nUse --help for more information." << std::endl;
        exit(0);
      case 'V':
        print_version();
        exit(0);
      case '?':
        std::cerr << "Use --usage or --help for some help\n";
        exit(1);
      case 'd':
        maximum_search_depth_given = true;
        maximum_search_depth_arg = yaggo::conv_int<int>((const char *)optarg, err, false);
        CHECK_ERR(int_t, optarg, "-d, --maximum-search-depth=int")
        break;
      case 'o':
        output_given = true;
        output_arg = optarg;
        break;
      }
    }

    // Parse arguments
    if(argc - optind != 4)
      error("Requires exactly 4 arguments.");
    largestkunitig_arg = yaggo::conv_uint<uint64_t>((const char *)argv[optind], err, false);
    CHECK_ERR(uint64_t, argv[optind], "largestkunitig")
    ++optind;
    kunitigLengthsFile_arg = argv[optind];
    ++optind;
    kmerlen_arg = yaggo::conv_int<int>((const char *)argv[optind], err, false);
    CHECK_ERR(int_t, argv[optind], "kmerlen")
    ++optind;
    SuperReads_sizes_arg = argv[optind];
    ++optind;
  }

#define reduce_sr_USAGE "Usage: reduce_sr [options] largestkunitig:uint64 kunitigLengthsFile:path kmerlen:int SuperReads_sizes:path"
  const char * usage() const { return reduce_sr_USAGE; }
  void error(const char *msg) { 
    std::cerr << "Error: " << msg << "\n" << usage()
              << "\nUse --help for more information"
              << std::endl;
    exit(1);
  }

#define reduce_sr_HELP "Reduce contained SuperReads to their largest container.\n\nLong description\n\n" \
  "Options (default value in (), *required):\n" \
  " -d, --maximum-search-depth=int           Check at most this many possible containing SuperReads (100)\n" \
  " -o, --output=path                        Output file name (reduce.tmp)\n" \
  "     --usage                              Usage\n" \
  " -h, --help                               This message\n" \
  " -V, --version                            Version"

  const char * help() const { return reduce_sr_HELP; }
#define reduce_sr_HIDDEN "Hidden options:"

  const char * hidden() const { return reduce_sr_HIDDEN; }
  void print_version(std::ostream &os = std::cout) const {
#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "0.0.0"
#endif
    os << PACKAGE_VERSION << "\n";
  }
  void dump(std::ostream &os = std::cout) {
    os << "maximum_search_depth_given:" << maximum_search_depth_given << " maximum_search_depth_arg:" << maximum_search_depth_arg << "\n";
    os << "output_given:" << output_given << " output_arg:" << output_arg << "\n";
    os << "largestkunitig_arg:" << largestkunitig_arg << "\n";
    os << "kunitigLengthsFile_arg:" << kunitigLengthsFile_arg << "\n";
    os << "kmerlen_arg:" << kmerlen_arg << "\n";
    os << "SuperReads_sizes_arg:" << SuperReads_sizes_arg << "\n";
  }
private:
};

#endif // __REDUCE_SR_HPP__"
