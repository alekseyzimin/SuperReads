/* SuperRead pipeline
 * Copyright (C) 2012  Genome group at University of Maryland.
 * 
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/***** This code was generated by Yaggo. Do not edit ******/

#ifndef __ERROR_CORRECTED2FRG_CMDLINE_HPP__
#define __ERROR_CORRECTED2FRG_CMDLINE_HPP__

#include <yaggo.hpp>

class error_corrected2frg_cmdline {
public:
  uint64_t                       length_min_arg;
  bool                           length_min_given;
  const char *                   lib_id_arg;
  double                         mean_arg;
  double                         stdev_arg;
  uint64_t                       number_of_reads_arg;
  const char *                   fasta_file_arg;

  enum {
    USAGE_OPT = 1000
  };

  error_corrected2frg_cmdline(int argc, char *argv[]) :
    length_min_arg(64), length_min_given(false)
  {
    static struct option long_options[] = {
      {"length-min", 1, 0, 'l'},
      {"help", 0, 0, 'h'},
      {"usage", 0, 0, USAGE_OPT},
      {"version", 0, 0, 'V'},
      {0, 0, 0, 0}
    };
    static const char *short_options = "hVl:";

    std::string err;
#define CHECK_ERR(type,val,which) if(!err.empty()) { std::cerr << "Invalid " #type " '" << val << "' for [" which "]: " << err << "\n"; exit(1); }
    while(true) { 
      int index = -1;
      int c = getopt_long(argc, argv, short_options, long_options, &index);
      if(c == -1) break;
      switch(c) {
      case ':': 
        std::cerr << "Missing required argument for "
                  << (index == -1 ? std::string(1, (char)optopt) : std::string(long_options[index].name))
                  << std::endl;
        exit(1);
      case 'h':
        std::cout << usage() << "\n\n" << help() << std::endl;
        exit(0);
      case USAGE_OPT:
        std::cout << usage() << "\nUse --help for more information." << std::endl;
        exit(0);
      case 'V':
        print_version();
        exit(0);
      case '?':
        std::cerr << "Use --usage or --help for some help\n";
        exit(1);
      case 'l':
        length_min_given = true;
        length_min_arg = yaggo::conv_uint<uint64_t>((const char *)optarg, err, false);
        CHECK_ERR(uint64_t, optarg, "-l, --length-min=uint64")
        break;
      }
    }
    if(argc - optind != 5)
      error("Requires exactly 5 arguments.");
    lib_id_arg = argv[optind];
    ++optind;
    mean_arg = yaggo::conv_double((const char *)argv[optind], err, false);
    CHECK_ERR(double_t, argv[optind], "mean")
    ++optind;
    stdev_arg = yaggo::conv_double((const char *)argv[optind], err, false);
    CHECK_ERR(double_t, argv[optind], "stdev")
    ++optind;
    number_of_reads_arg = yaggo::conv_uint<uint64_t>((const char *)argv[optind], err, false);
    CHECK_ERR(uint64_t, argv[optind], "number_of_reads")
    ++optind;
    fasta_file_arg = argv[optind];
    ++optind;
  }
#define error_corrected2frg_cmdline_USAGE "Usage: error_corrected2frg [options] lib_id:c_string mean:double stdev:double number_of_reads:uint64 fasta_file:c_string"
  const char * usage() const { return error_corrected2frg_cmdline_USAGE; }
  void error(const char *msg) { 
    std::cerr << "Error: " << msg << "\n" << usage()
              << "\nUse --help for more information"
              << std::endl;
    exit(1);
  }
#define error_corrected2frg_cmdline_HELP "Create a frag file (.frg) from error corrected reads.\n\n\n\n" \
  "Options (default value in (), *required):\n" \
  " -l, --length-min=uint64                  Minimum length of a read (64)\n" \
  "     --usage                              Usage\n" \
  " -h, --help                               This message\n" \
  " -V, --version                            Version"

  const char * help() const { return error_corrected2frg_cmdline_HELP; }
#define error_corrected2frg_cmdline_HIDDEN "Hidden options:"

  const char * hidden() const { return error_corrected2frg_cmdline_HIDDEN; }
  void print_version(std::ostream &os = std::cout) const {
#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "0.0.0"
#endif
    os << PACKAGE_VERSION << "\n";
  }
  void dump(std::ostream &os = std::cout) {
    os << "length_min_given:" << length_min_given << " length_min_arg:" << length_min_arg << "\n";
    os << "lib_id_arg:" << lib_id_arg << "\n";
    os << "mean_arg:" << mean_arg << "\n";
    os << "stdev_arg:" << stdev_arg << "\n";
    os << "number_of_reads_arg:" << number_of_reads_arg << "\n";
    os << "fasta_file_arg:" << fasta_file_arg << "\n";
  }
private:
};

#endif // __ERROR_CORRECTED2FRG_CMDLINE_HPP__"
