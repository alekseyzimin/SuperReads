/** @file create_k_unitigs_cmdline.hpp
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CREATE_K_UNITIGS_CMDLINE_H
#define CREATE_K_UNITIGS_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CREATE_K_UNITIGS_CMD_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CREATE_K_UNITIGS_CMD_PARSER_PACKAGE "create_k_unitigs"
#endif

#ifndef CREATE_K_UNITIGS_CMD_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CREATE_K_UNITIGS_CMD_PARSER_PACKAGE_NAME "create_k_unitigs"
#endif

#ifndef CREATE_K_UNITIGS_CMD_PARSER_VERSION
/** @brief the program version */
#define CREATE_K_UNITIGS_CMD_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct create_k_unitigs_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int both_strands_flag;	/**< @brief Both strands (default=off).  */
  const char *both_strands_help; /**< @brief Both strands help description.  */
  int threads_arg;	/**< @brief Number of threads (default='1').  */
  char * threads_orig;	/**< @brief Number of threads original value given at command line.  */
  const char *threads_help; /**< @brief Number of threads help description.  */
  int verbose_flag;	/**< @brief Be verbose (default=off).  */
  const char *verbose_help; /**< @brief Be verbose help description.  */
  char * prefix_arg;	/**< @brief Output prefix (default='k_unitigs').  */
  char * prefix_orig;	/**< @brief Output prefix original value given at command line.  */
  const char *prefix_help; /**< @brief Output prefix help description.  */
  int min_len_arg;	/**< @brief Minimum length of k-unitig to output.  */
  char * min_len_orig;	/**< @brief Minimum length of k-unitig to output original value given at command line.  */
  const char *min_len_help; /**< @brief Minimum length of k-unitig to output help description.  */
  int min_cov_arg;	/**< @brief Minimum k-mer coverage to be considered (default='2').  */
  char * min_cov_orig;	/**< @brief Minimum k-mer coverage to be considered original value given at command line.  */
  const char *min_cov_help; /**< @brief Minimum k-mer coverage to be considered help description.  */
  int min_cont_arg;	/**< @brief Minimum k-mer coverage to continue (default='3').  */
  char * min_cont_orig;	/**< @brief Minimum k-mer coverage to continue original value given at command line.  */
  const char *min_cont_help; /**< @brief Minimum k-mer coverage to continue help description.  */
  int cont_on_low_flag;	/**< @brief Continue on unique low k-mer (count < m) (default=off).  */
  const char *cont_on_low_help; /**< @brief Continue on unique low k-mer (count < m) help description.  */
  int low_stretch_arg;	/**< @brief Max number of low k-mer (default='3').  */
  char * low_stretch_orig;	/**< @brief Max number of low k-mer original value given at command line.  */
  const char *low_stretch_help; /**< @brief Max number of low k-mer help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int both_strands_given ;	/**< @brief Whether both-strands was given.  */
  unsigned int threads_given ;	/**< @brief Whether threads was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int prefix_given ;	/**< @brief Whether prefix was given.  */
  unsigned int min_len_given ;	/**< @brief Whether min-len was given.  */
  unsigned int min_cov_given ;	/**< @brief Whether min-cov was given.  */
  unsigned int min_cont_given ;	/**< @brief Whether min-cont was given.  */
  unsigned int cont_on_low_given ;	/**< @brief Whether cont-on-low was given.  */
  unsigned int low_stretch_given ;	/**< @brief Whether low-stretch was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct create_k_unitigs_cmd_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure create_k_unitigs_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure create_k_unitigs_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *create_k_unitigs_args_info_purpose;
/** @brief the usage string of the program */
extern const char *create_k_unitigs_args_info_usage;
/** @brief all the lines making the help output */
extern const char *create_k_unitigs_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int create_k_unitigs_cmd_parser (int argc, char **argv,
  struct create_k_unitigs_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use create_k_unitigs_cmd_parser_ext() instead
 */
int create_k_unitigs_cmd_parser2 (int argc, char **argv,
  struct create_k_unitigs_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int create_k_unitigs_cmd_parser_ext (int argc, char **argv,
  struct create_k_unitigs_args_info *args_info,
  struct create_k_unitigs_cmd_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int create_k_unitigs_cmd_parser_dump(FILE *outfile,
  struct create_k_unitigs_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int create_k_unitigs_cmd_parser_file_save(const char *filename,
  struct create_k_unitigs_args_info *args_info);

/**
 * Print the help
 */
void create_k_unitigs_cmd_parser_print_help(void);
/**
 * Print the version
 */
void create_k_unitigs_cmd_parser_print_version(void);

/**
 * Initializes all the fields a create_k_unitigs_cmd_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void create_k_unitigs_cmd_parser_params_init(struct create_k_unitigs_cmd_parser_params *params);

/**
 * Allocates dynamically a create_k_unitigs_cmd_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized create_k_unitigs_cmd_parser_params structure
 */
struct create_k_unitigs_cmd_parser_params *create_k_unitigs_cmd_parser_params_create(void);

/**
 * Initializes the passed create_k_unitigs_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void create_k_unitigs_cmd_parser_init (struct create_k_unitigs_args_info *args_info);
/**
 * Deallocates the string fields of the create_k_unitigs_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void create_k_unitigs_cmd_parser_free (struct create_k_unitigs_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int create_k_unitigs_cmd_parser_required (struct create_k_unitigs_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CREATE_K_UNITIGS_CMDLINE_H */
