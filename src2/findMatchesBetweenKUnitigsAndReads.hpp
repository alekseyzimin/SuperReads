/***** This code was generated by Yaggo. Do not edit ******/

#ifndef __FINDMATCHESBETWEENKUNITIGSANDREADS_HPP__
#define __FINDMATCHESBETWEENKUNITIGSANDREADS_HPP__

#include <yaggo.hpp>

class findMatchesBetweenKUnitigsAndReads {
public:
  bool                           long_flag;
  const char *                   output_arg;
  bool                           output_given;
  uint32_t                       threads_arg;
  bool                           threads_given;
  const char *                   jellyfishdb_arg;
  const char *                   kUnitigFile_arg;
  const char *                   numKUnitigsFile_arg;
  std::vector<const char *>      readFiles_arg;
  typedef std::vector<const char *>::iterator readFiles_arg_it;
  typedef std::vector<const char *>::const_iterator readFiles_arg_const_it;

  enum {
    USAGE_OPT = 1000
  };

  findMatchesBetweenKUnitigsAndReads() : 
    long_flag(false),
    output_arg(""), output_given(false),
    threads_arg(1), threads_given(false)
  { }

  findMatchesBetweenKUnitigsAndReads(int argc, char* argv[]) :
    long_flag(false),
    output_arg(""), output_given(false),
    threads_arg(1), threads_given(false)
  { parse(argc, argv); }

  void parse(int argc, char* argv[]) {
    static struct option long_options[] = {
      {"long", 0, 0, 'l'},
      {"output", 1, 0, 'o'},
      {"threads", 1, 0, 't'},
      {"help", 0, 0, 'h'},
      {"usage", 0, 0, USAGE_OPT},
      {"version", 0, 0, 'V'},
      {0, 0, 0, 0}
    };
    static const char *short_options = "hVlo:t:";

    std::string err;
#define CHECK_ERR(type,val,which) if(!err.empty()) { std::cerr << "Invalid " #type " '" << val << "' for [" which "]: " << err << "\n"; exit(1); }
    while(true) { 
      int index = -1;
      int c = getopt_long(argc, argv, short_options, long_options, &index);
      if(c == -1) break;
      switch(c) {
      case ':': 
        std::cerr << "Missing required argument for "
                  << (index == -1 ? std::string(1, (char)optopt) : std::string(long_options[index].name))
                  << std::endl;
        exit(1);
      case 'h':
        std::cout << usage() << "\n\n" << help() << std::endl;
        exit(0);
      case USAGE_OPT:
        std::cout << usage() << "\nUse --help for more information." << std::endl;
        exit(0);
      case 'V':
        print_version();
        exit(0);
      case '?':
        std::cerr << "Use --usage or --help for some help\n";
        exit(1);
      case 'l':
        long_flag = true;
        break;
      case 'o':
        output_given = true;
        output_arg = optarg;
        break;
      case 't':
        threads_given = true;
        threads_arg = yaggo::conv_uint<uint32_t>((const char*)optarg, err, false);
        CHECK_ERR(uint32_t, optarg, "-t, --threads=uint32")
        break;
      }
    }

    // Check that required switches are present
    if(!output_given)
      error("[-o, --output=string] required switch");

    // Parse arguments
    if(argc - optind < 3)
      error("Requires at least 3 arguments.");
    jellyfishdb_arg = argv[optind];
    ++optind;
    kUnitigFile_arg = argv[optind];
    ++optind;
    numKUnitigsFile_arg = argv[optind];
    ++optind;
    for( ; optind < argc; ++optind) {
      readFiles_arg.push_back(argv[optind]);
    }
  }

#define findMatchesBetweenKUnitigsAndReads_USAGE "Usage: findMatchesBetweenKUnitigsAndReads [options] jellyfishdb:path kUnitigFile:path numKUnitigsFile:path readFiles:path+"
  const char * usage() const { return findMatchesBetweenKUnitigsAndReads_USAGE; }
  void error(const char *msg) { 
    std::cerr << "Error: " << msg << "\n" << usage()
              << "\nUse --help for more information"
              << std::endl;
    exit(1);
  }

#define findMatchesBetweenKUnitigsAndReads_HELP "Find matches between k-unitigs and rads\n\n\n\n" \
  "Options (default value in (), *required):\n" \
  " -l, --long                               Long output format (false)\n" \
  " -o, --output=string                     *Output file\n" \
  " -t, --threads=uint32                     Number of threads (1)\n" \
  "     --usage                              Usage\n" \
  " -h, --help                               This message\n" \
  " -V, --version                            Version"

  const char * help() const { return findMatchesBetweenKUnitigsAndReads_HELP; }
#define findMatchesBetweenKUnitigsAndReads_HIDDEN "Hidden options:"

  const char * hidden() const { return findMatchesBetweenKUnitigsAndReads_HIDDEN; }
  void print_version(std::ostream &os = std::cout) const {
#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "0.0.0"
#endif
    os << PACKAGE_VERSION << "\n";
  }
  void dump(std::ostream &os = std::cout) {
    os << "long_flag:" << long_flag << "\n";
    os << "output_given:" << output_given << " output_arg:" << output_arg << "\n";
    os << "threads_given:" << threads_given << " threads_arg:" << threads_arg << "\n";
    os << "jellyfishdb_arg:" << jellyfishdb_arg << "\n";
    os << "kUnitigFile_arg:" << kUnitigFile_arg << "\n";
    os << "numKUnitigsFile_arg:" << numKUnitigsFile_arg << "\n";
    os << "readFiles_arg:" << yaggo::vec_str(readFiles_arg) << "\n";
  }
private:
};
#endif // __FINDMATCHESBETWEENKUNITIGSANDREADS_HPP__"
