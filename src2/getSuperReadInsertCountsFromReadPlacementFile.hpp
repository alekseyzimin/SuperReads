/***** This code was generated by Yaggo. Do not edit ******/

#ifndef __GETSUPERREADINSERTCOUNTSFROMREADPLACEMENTFILE_HPP__
#define __GETSUPERREADINSERTCOUNTSFROMREADPLACEMENTFILE_HPP__

#include <yaggo.hpp>

class getSuperReadInsertCountsFromReadPlacementFile {
public:
  const char *                   input_arg;
  bool                           input_given;
  const char *                   output_arg;
  bool                           output_given;
  bool                           fib_flag;

  enum {
    USAGE_OPT = 1000,
    FIB_OPT
  };

  getSuperReadInsertCountsFromReadPlacementFile(int argc, char *argv[]) :
    input_arg("/dev/fd/0"), input_given(false),
    output_arg("/dev/fd/1"), output_given(false),
    fib_flag(false)
  {
    static struct option long_options[] = {
      {"input", 1, 0, 'i'},
      {"output", 1, 0, 'o'},
      {"fib", 0, 0, FIB_OPT},
      {"help", 0, 0, 'h'},
      {"usage", 0, 0, USAGE_OPT},
      {"version", 0, 0, 'V'},
      {0, 0, 0, 0}
    };
    static const char *short_options = "hVi:o:";

#define CHECK_ERR(type,val,which) if(!err.empty()) { std::cerr << "Invalid " #type " '" << val << "' for [" which "]: " << err << "\n"; exit(1); }
    while(true) { 
      int index = -1;
      int c = getopt_long(argc, argv, short_options, long_options, &index);
      if(c == -1) break;
      switch(c) {
      case ':': 
        std::cerr << "Missing required argument for "
                  << (index == -1 ? std::string(1, (char)optopt) : std::string(long_options[index].name))
                  << std::endl;
        exit(1);
      case 'h':
        std::cout << usage() << "\n\n" << help() << std::endl;
        exit(0);
      case USAGE_OPT:
        std::cout << usage() << "\nUse --help for more information." << std::endl;
        exit(0);
      case 'V':
        print_version();
        exit(0);
      case '?':
        std::cerr << "Use --usage or --help for some help\n";
        exit(1);
      case 'i':
        input_given = true;
        input_arg = optarg;
        break;
      case 'o':
        output_given = true;
        output_arg = optarg;
        break;
      case FIB_OPT:
        fib_flag = true;
        break;
      }
    }
    if(argc - optind != 0)
      error("Requires exactly 0 argument.");
  }
#define getSuperReadInsertCountsFromReadPlacementFile_USAGE "Usage: getSuperReadInsertCountsFromReadPlacementFile [options]"
  const char * usage() const { return getSuperReadInsertCountsFromReadPlacementFile_USAGE; }
  void error(const char *msg) { 
    std::cerr << "Error: " << msg << "\n" << usage()
              << "\nUse --help for more information"
              << std::endl;
    exit(1);
  }
#define getSuperReadInsertCountsFromReadPlacementFile_HELP "Count number of occurences of each super-read\n\nNo long description!\n\n" \
  "Options (default value in (), *required):\n" \
  " -i, --input=path                         Input file (/dev/fd/0)\n" \
  " -o, --output=path                        Output file (/dev/fd/1)\n" \
  "     --fib                                Use fibonacci encoding of the names (false)\n" \
  "     --usage                              Usage\n" \
  " -h, --help                               This message\n" \
  " -V, --version                            Version"

  const char * help() const { return getSuperReadInsertCountsFromReadPlacementFile_HELP; }
#define getSuperReadInsertCountsFromReadPlacementFile_HIDDEN "Hidden options:"

  const char * hidden() const { return getSuperReadInsertCountsFromReadPlacementFile_HIDDEN; }
  void print_version(std::ostream &os = std::cout) const {
#ifndef PACKAGE_VERSION
#define PACKAGE_VERSION "0.0.0"
#endif
    os << PACKAGE_VERSION << "\n";
  }
  void dump(std::ostream &os = std::cout) {
    os << "input_given:" << input_given << " input_arg:" << input_arg << "\n";
    os << "output_given:" << output_given << " output_arg:" << output_arg << "\n";
    os << "fib_flag:" << fib_flag << "\n";
  }
private:
};

#endif // __GETSUPERREADINSERTCOUNTSFROMREADPLACEMENTFILE_HPP__"
